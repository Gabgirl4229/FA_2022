#include <iostream>
using namespace std;


class Node {
  public:
    int data;
    int height;
    Node *left;
    Node *right;
    Node(){
      data = 0;
      height = 0;
      left = NULL;
      right = NULL;

    }
    Node(int val){
      data = val;
      height = 0;
      left = NULL;
      right = NULL;

    }
};

//linked list to store and output range search result
class lnode
{
public:
    Node* ptr;
    lnode* next;
};

class single_linked_list
{
private:
    lnode* head;
public:
    int length;
    single_linked_list();
    ~single_linked_list();

    void PushBack(Node* key);
    int TopBack();
    int PopBack();
    bool Empty();
    void DisplayAll();

};

void inorder(Node *currentPtr);
Node* insert(Node *root, Node *element);
int add(Node *currentPtr);
int find(Node *currentPtr, int val);
Node* parent(Node *root, Node *node);
Node* minVal(Node *root);
Node* maxVal(Node *root);
int isLeaf(Node *node);
int hasOnlyLeftChild(Node *node);
int hasOnlyRightChild(Node *node);
Node* findNode(Node *currentPtr, int value);
Node* deleteNode(Node* root, int value);
int menu();
//new prototypes
Node* next(Node* root, Node* current);
Node* leftDescendant(Node* current);
Node* rightAncestor(Node* root, Node* current);
void AVLinsert(Node* root, int val);
void rebalance(Node* root, Node* current);
void rotateLeft(Node* root, Node* current);
void rotateRight(Node* root, Node* current);
void adjustHeight(Node* current);
void rebalanceLeft(Node* root, Node* current);
void rebalanceRight(Node* root, Node* current);
int computeBF(Node* current);
int computeHeight(Node* current);
bool isUnbalance(Node* current);
void AVLdelete(Node* root, int value);
void findRange(Node* root, single_linked_list* list, int min, int max);

void inorder(Node *currentPtr) {

  // Only traverse the node if it's not null.
  if (currentPtr != NULL) {
    inorder(currentPtr->left); // Go Left.
    cout<<" "<<currentPtr->data; // Print the root.
    inorder(currentPtr->right); // Go Right.
  }
}

Node* insert(Node *root, Node *element) {

  // Inserting into an empty tree.
  if (root == NULL){
    return element;
  }
  else {

    // element should be inserted to the right.
    if (element->data > root->data) {

      // There is a right subtree to insert the node.
      if (root->right != NULL)
        root->right = insert(root->right, element);

      // Place the node directly to the right of root.
      else
        root->right = element;
    }

    // element should be inserted to the left.
    else {

      // There is a left subtree to insert the node.
      if (root->left != NULL)
        root->left = insert(root->left, element);

      // Place the node directly to the left of root.
      else
        root->left = element;
    }

    // Return the root pointer of the updated tree.
    return root;
  }
}



int find(Node *currentPtr, int val) {

  // Check if there are nodes in the tree.
  if (currentPtr != NULL) {

    // Found the value at the root.
    if (currentPtr->data == val)
      return 1;

    // Search to the left.
    if (val < currentPtr->data)
      return find(currentPtr->left, val);

    // Or search to the right.
    else
      return find(currentPtr->right, val);

  }
  else
    return 0;
}



int add(Node *currentPtr) {

    if (currentPtr != NULL)
        return currentPtr->data + add(currentPtr->left) + add(currentPtr->right);
  else
    return 0;
}

// Returns the parent of the node pointed to by node in the tree rooted at
// root. If the node is the root of the tree, or the node doesn't exist in
// the tree, null will be returned.
Node* parent(Node *root, Node *node) {

  // Take care of NULL cases.
  if (root == NULL || root == node)
    return NULL;

  // The root is the direct parent of node.
  if (root->left == node || root->right == node)
    return root;

  // Look for node's parent in the left side of the tree.
  if (node->data < root->data)
    return parent(root->left, node);

  // Look for node's parent in the right side of the tree.
  else if (node->data > root->data)
    return parent(root->right, node);

  return NULL; // For any other cases.

}

// Returns a pointer to the node storing the minimum value in the tree
Node* minVal(Node *root) {

  // Root stores the minimal value.
  if (root->left == NULL)
    return root;

  // The left subtree of the root stores the minimal value.
  else
    return minVal(root->left);
}


// Returns a pointer to the node storing the maximum value in the tree
Node* maxVal(Node *root) {

  // Root stores the maximal value.
  if (root->right == NULL)
    return root;

  // The right subtree of the root stores the maximal value.
  else
    return maxVal(root->right);
}

// Returns 1 if node is a leaf node, 0 otherwise.
int isLeaf(Node *node) {

  return (node->left == NULL && node->right == NULL);
}

// Returns 1 iff node has a left child and no right child.
int hasOnlyLeftChild(Node *node) {
  return (node->left!= NULL && node->right == NULL);
}

// Returns 1 iff node has a right child and no left child.
int hasOnlyRightChild(Node *node) {
  return (node->left== NULL && node->right != NULL);
}

// Returns a pointer to a node that stores value in it in the subtree
Node* findNode(Node *currentPtr, int value) {

  // Check if there are nodes in the tree.
  if (currentPtr != NULL) {

    // Found the value at the root.
    if (currentPtr->data == value)
      return currentPtr;

    // Search to the left.
    if (value < currentPtr->data)
      return findNode(currentPtr->left, value);

    // Or search to the right.
    else
      return findNode(currentPtr->right, value);

  }
  else
    return NULL; // No node found.
}

// Will delete the node storing value in the tree rooted at root. The
// value must be present in the tree in order for this function to work.
// The function returns a pointer to the root of the resulting tree.
Node* deleteNode(Node* root, int value) {

  Node *delnode, *newDelNode, *saveNode;
  Node *par;
  int saveVal;

  delnode = findNode(root, value); // Get a pointer to the node to delete.

  par = parent(root, delnode); // Get the parent of this node.

  // Take care of the case where the node to delete is a leaf node.
  if (isLeaf(delnode)) {// case 1

    // Deleting the only node in the tree.
    if (par == NULL) {
      delete root; // free the memory for the node.
      return NULL;
    }

    // Deletes the node if it's a left child.
    if (value < par->data) {
      delete par->left; // Free the memory for the node.
    }

    // Deletes the node if it's a right child.
    else {
      delete par->right; // Free the memory for the node.
      par->right = NULL;
    }

    return root; // Return the root of the new tree.
  }

  // Take care of the case where the node to be deleted only has a left
  // child.
  if (hasOnlyLeftChild(delnode)) {

    // Deleting the root node of the tree.
    if (par == NULL) {
      saveNode = delnode->left;
      delete delnode; // Free the node to delete.
      return saveNode; // Return the new root node of the resulting tree.
    }

    // Deletes the node if it's a left child.
    if (value < par->data) {
      saveNode = par->left; // Save the node to delete.
      par->left = par->left->left; // Readjust the parent pointer.
      delete saveNode; // Free the memory for the deleted node.
    }

    // Deletes the node if it's a right child.
    else {
      saveNode = par->right; // Save the node to delete.
      par->right = par->right->left; // Readjust the parent pointer.
      delete saveNode; // Free the memory for the deleted node.
    }

    return root; // Return the root of the tree after the deletion.
  }

  // Takes care of the case where the deleted node only has a right child.
  if (hasOnlyRightChild(delnode)) {

    // Node to delete is the root node.
    if (par == NULL) {
      saveNode = delnode->right;
      delete delnode;
      return saveNode;
    }

    // Delete's the node if it is a left child.
    if (value < par->data) {
      saveNode = par->left;
      par->left = par->left->right;
      delete saveNode;
    }

    // Delete's the node if it is a right child.
    else {
      saveNode = par->right;
      par->right = par->right->right;
      delete saveNode;
    }
    return root;
  }
//when delnode has two children
  // Find the new physical node to delete.
  newDelNode = minVal(delnode->right);
  saveVal = newDelNode->data;

  deleteNode(root, saveVal);  // Now, delete the proper value.

  // Restore the data to the original node to be deleted.
  delnode->data = saveVal;

  return root;
}

//begin ext. library
Node* next(Node* root, Node* current) {//finds next element
    if (current->right == NULL) {
        return rightAncestor(root, current);
    }
    else {
        return leftDescendant(current->right);
    }
}

Node* leftDescendant(Node* current) {//finds next descendant
    if (current->left == NULL) {
        return current;
    }
    else {
        return leftDescendant(current->left);
    }
}

Node* rightAncestor(Node* root, Node* current) {//finds next ancestor
    Node* up = parent(root, current); //store address of parent for multiple use
    if (current->data < up->data) {
        return up;
    }
    else {
        rightAncestor(root, up);
    }
}

void AVLinsert(Node* root, int val) {//inserts node and rebalances tree
    insert(root, findNode(root, val));
    Node* element = findNode(root, val);
    rebalance(root, element);
}

void rebalance(Node* root, Node* current) {
    Node* par = parent(root, current);
    if (current->left->height > current->right->height + 1) {
        rebalanceRight(root, current);
    }
    if (current->right->height > current->left->height + 1) {
        rebalanceLeft(root, current);
    }
    adjustHeight(current);
    if (par != NULL) {
        rebalance(root, par);
    }
    
}

void rebalanceRight(Node* root, Node* current) {
    Node* next = current->left;
    if (next->right->height > next->left->height) {
        rotateLeft(root, next);
    }
    else {
        rotateRight(root, current);
    }
    adjustHeight(current);
    adjustHeight(next);
}

void rebalanceLeft(Node* root, Node* current) {
    Node* next = current->left;
    if (next->right->height < next->left->height) {
        rotateRight(root, next);
    }
    else {
        rotateLeft(root, current);
    }
    adjustHeight(current);
    adjustHeight(next);
}

void adjustHeight(Node* current) {//updates height of current node
    current->height = 1 + max(current->left->height, current->right->height);
}

void rotateRight(Node* root, Node* current) {//rotates right from current node
    Node* par = parent(root, current);
    Node* next = current->left;
    Node* T2 = next->right;
    if (next->data < par->data) {
        par->left = next;
    }
    else {
        par->right = next;
    }
    current->left = T2;
    next->right = current;
}

void rotateLeft(Node* root, Node* current) {//rotates left from current node
    Node* par = parent(root, current);
    Node* next = current->right;
    Node* T2 = next->left;
    if (next->data < par->data) {
        par->left = next;
    }
    else {
        par->right = next;
    }
    current->right = T2;
    next->left = current;
}

int computeBF(Node* current) {//returns the balance factor of a node
    return (current->left - current->right);
}

int computeHeight(Node* current) {//returns the height of a node
    if (current == NULL) {
        return 0;
    }
    else {
        int heightL = computeHeight(current->left);
        int heightR = computeHeight(current->right);
        return max(heightL, heightR) + 1;
    }
}

bool isUnbalance(Node* current) {//checks balance of node
    if (computeBF(current) <= 1 && computeBF(current) >= -1) {
        return true;
    }
    else {
        return false;
    }
}

void AVLdelete(Node* root, int value) {//deletes node and rebalances tree
    Node* par = parent(root, findNode(root, value));
    deleteNode(root, value);
    rebalance(root, par);
}

void findRange(Node* root, single_linked_list* list, int min, int max) {//returns list of elements in range
    Node* current = findNode(root, min);
    while (current->data < max && current->data >= min) {
            list->PushBack(current);
            current = next(root, current);
    }
    if (current->data == max) {
        list->PushBack(current);
    }
    
}

// Prints out the menu of choices for the user and returns their choice.
int menu() {

  int ans;
  cout<<"Here are your choices.\n";
  cout<<"1. Insert an item into your tree.\n";
  cout<<"2. Delete an item from your tree.\n";
  cout<<"3. Search for an item in your tree.\n";
  cout<<"4. Print the sum of the nodes. \n";
  cout << "5. Print the next element of the node with key.\n"; //add additional menu items (5-8)
  cout << "6. Print the elements between x, and y.\n";
  cout << "7. Print the height of the tree with root x.\n";
  cout << "8. Print the sum of the list of elements between x, and y.\n";
  cout<<"9. Print out an inorder traversal.\n";
  cout<<"10. Exit.\n";
  cin>> ans;
  return ans;
}




single_linked_list::single_linked_list()
{
    this->length = 0;
    this->head = NULL;
}

single_linked_list::~single_linked_list()
{
    cout << "\n";
}

void single_linked_list::PushBack(Node* key)
{
    if (head == NULL) {
        lnode* Element = new lnode();
        head = Element;
        Element->ptr = key;
        length++;
    }
    else {
        lnode* inc = head;
        while (inc->next != NULL) {
            inc = inc->next;
        }
        lnode* Element = new lnode();
        Element->ptr = key;
        inc->next = Element;
        length++;
    }
}

int single_linked_list::PopBack()
{
    if (head == NULL) {
        return -1;
    }
    else {
        lnode* inc = head;
        lnode* prev = head;
        while (inc->next != NULL) {
            prev = inc;
            inc = inc->next;
        }
        int out = inc->ptr->data;
        prev->next = NULL;
        length--;
        delete inc;
        if (this->length == 0) {
            head = NULL;
        }
        return out;
    }
}

int single_linked_list::TopBack()
{
    if (head == NULL) {
        return -1;
    }
    else {
        lnode* inc = head;
        while (inc->next != NULL) {
            inc = inc->next;
        }
        return inc->ptr->data;
    }
}

bool single_linked_list::Empty()
{
    if (head == NULL) {
        return true;
    }
    else {
        return false;
    }
}

void single_linked_list::DisplayAll()
{
    if (head == NULL) {
        cout << "empty list\n";
    }
    else {
        lnode* inc = head;
        while (inc != NULL) {
            cout << inc->ptr->data << "\t";
            inc = inc->next;
        }
        cout << "\n";
    }
}


int main() {

  Node *myRoot=NULL, *tempNode;
  single_linked_list myList = single_linked_list();
  int done = 0,ans=1, val, q6data;

  ans = menu();
  while (ans<10) {

    if (ans == 1) {

      // Get value to insert.
      cout<<"What value would you like to insert? ";
      cin>>val;
      tempNode = new Node(val); // Create the node.

      // Insert the value.
      myRoot = insert(myRoot, tempNode);
    }

    if (ans == 2) {
      cout<<"What value would you like to delete?\n";
      cin>>val;
      if (!find(myRoot, val))
        cout<<"Sorry that value isn't in the tree to delete.\n";
      else {
        myRoot = deleteNode(myRoot, val);
      }
    }

    if (ans == 3) {
      cout<<"What value would you like to search for?\n";
      cin>>val;
      if (find(myRoot, val))
        cout<<" Found "<<val<<" in the tree.\n";
      else
        cout<<" Did not find " << val << " in the tree.\n";
    }

    if (ans == 4)
      cout<<"The sum of the nodes in your tree is "<<add(myRoot)<<"\n";

    if (ans == 5) {
        cout << "Enter the value of the first node ";
        cin >> val;
        cout << "The value of the next node is: " << next(myRoot, findNode(myRoot, val))->data << "\n";

    }

    if (ans == 6) {
        cout << "Enter the bounds of your search ";
        cin >> val >> q6data;
        findRange(myRoot, &myList, val, q6data);
        myList.DisplayAll();
        while (myList.length > 0) { //clears list for later
            myList.PopBack();
        }
    }

    if (ans == 7) {
        cout << "Enter the node ";
        cin >> val;
        cout << "The height is: " << computeHeight(findNode(myRoot, val));
    }

    if (ans == 8) {
        done = 0;
        cout << "Enter the bounds ";
        cin >> val >> q6data;
        findRange(myRoot, &myList, val, q6data);
        while (myList.length > 0) {
            done += myList.PopBack();
        }
        cout << "The sum is: " << done << "\n";
        
    }

    if (ans == 9) {
      // Print the resulting tree.
      cout<<"Here is an inorder traversal of your tree: ";
      inorder(myRoot);
      cout<<"\n";
    }
    
    
    // See if they want to insert more nodes.
    ans = menu();
  }



  return 0;
}