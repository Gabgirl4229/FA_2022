#include <iostream>
#include <vector>
#include <algorithm>

using std::vector;
using std::cin;
using std::cout;


class JobQueue {
 private:
  int num_workers_;
  vector<int> jobs_;

  vector<int> assigned_workers_;
  vector<long long> start_times_;


  void assignLog() {// assign jobs to thread by extracting the next job, assigning it to the lowest unassigned thread, when all threads are assigned time progresses
      assigned_workers_.resize(jobs_.size());
      start_times_.resize(jobs_.size());
      vector<long long> next_free_time(num_workers_, 0);
      int pickThread = 0, jobNum = 0, time = 0;
      while (jobNum < jobs_.size()) {
          
          if (next_free_time[pickThread % num_workers_] == time) {
              assigned_workers_[jobNum] = (pickThread % num_workers_);
              start_times_[jobNum] = next_free_time[pickThread % num_workers_];
              next_free_time[pickThread % num_workers_] += jobs_[jobNum];
              pickThread++;
              jobNum++;
          }
          else {
              time++;
          }
      }
  }

  void WriteResponse() const {
    for (int i = 0; i < jobs_.size(); ++i) {
      cout << assigned_workers_[i] << " " << start_times_[i] << "\n";
    }
  }

  void ReadData() {
    int m;
    cin >> num_workers_ >> m;
    jobs_.resize(m);
    for(int i = 0; i < m; ++i)
      cin >> jobs_[i];
  }

  void AssignJobs() {
    // TODO: replace this code with a faster algorithm.
    assigned_workers_.resize(jobs_.size());
    start_times_.resize(jobs_.size());
    vector<long long> next_free_time(num_workers_, 0);
    for (int i = 0; i < jobs_.size(); ++i) {
      int duration = jobs_[i];
      int next_worker = 0;
      for (int j = 0; j < num_workers_; ++j) {
        if (next_free_time[j] < next_free_time[next_worker])
          next_worker = j;
      }
      assigned_workers_[i] = next_worker;
      start_times_[i] = next_free_time[next_worker];
      next_free_time[next_worker] += duration;
    }
  }


 public:
  void Solve() {
    ReadData();
    assignLog();
    WriteResponse();
  }

};



int main() {
  std::ios_base::sync_with_stdio(false);
  JobQueue job_queue;
  job_queue.Solve();
  return 0;
}
